============================
Chapel Implementation Status
============================

This file contains a list of unimplemented features and known bugs in
the Chapel implementation.  If you find additional bugs and
unimplemented features, or if you would like to request prioritization
of items in this file, please let us know at
chapel-bugs@lists.sourceforge.net or chapel_info@cray.com.  Please
feel encouraged to err on the side of mailing us with any issues you
run into.



General (see also portability section at the bottom of this file)
-----------------------------------------------------------------
- Some error messages are confusing or unhelpful.
  Workaround: Please ask us for help with interpreting the message.
- Compiler and runtime and errors may report incorrect line numbers,
  may not be formatted correctly, or may be garbled.  Workaround:
  Please ask us for help finding the line in question.
- Back-end compilers may emit warning messages.
- Names in a Chapel program can collide with names used internally.
- There are several internal memory leaks including the following:
  1. All strings are leaked.
  2. Privatized domains and arrays are leaked (i.e., those that use
     the standard distributions).
  3. Data associated with iterators may be leaked.
  4. Data accessed in 'on' and/or 'begin' statements may be leaked.
  5. Sync and single variable record members may be leaked.
  6. Distributed arrays and domains may be leaked.
  7. Distributions may be leaked.
  Workaround: Use memory tracking facilities (see README.executing).
  Workaround: Please ask us for help with your particular problem.
- Reference counting (used for memory management) may contain bugs.
- The --gdb flag is only supported for single-locale platforms that
  support gdb.  Please ask us for help if you want to debug a
  multilocale program.
- Separate compilation of Chapel files is not supported.


Types, Variables, Conversions, Expressions, and Statements
----------------------------------------------------------
- Continue statements in forall and coforall statements not implemented.
- Unlabeled break and continue statements fail to compile in param for loops.
- Types declared within a param conditional block may result in an
  internal compiler error.
- Param conditionals resulting in dead code may result in an internal
  compiler error.
- Querying the type of a function is not supported and currently
  returns an internal type.
- Query expressions for primitive type bit-sizes results in an
  internal compiler error.
- Enum types always represented using the smallest integer type
  available, even if the enum values require a larger integer.
- Implicit conversions of enums to uint not supported.
- Casts and relational operations involving enum constants may fail to
  compile or produce incorrect answers.
- Casts to non-type variables does not result in an error at compile time.
- Casts from uint param to strings treat the string as int.
- Multiple configuration parameters with different types declared in a
  single statement result in an internal error.
- When setting a config variable that share an initializer on the
  command line, the new value is incorrectly propagated to the other
  variables.
- Variables that rely on each other for initialization
  and/or type inference may result in an internal compiler error.


Modules and Functions
---------------------
- Programs requiring non-linear resolution may fail to compile.
  E.g., mutual module uses that access variables across both modules
- Modules that rely on each other for initialization
  and/or type inference may result in an internal compiler error.
- Invalid where clauses may result in an internal compiler error.
- Array-of-array formal argument declarations do not work
- Specified argument types that are not types should return a Chapel
  compile time error, but instead they may result in an internal
  compiler error or compile and run.
- Recursive functions that return arrays are not yet supported
- Recursive functions with default argument values may not work.
- Param functions can return runtime variables.
- Param functions with explicit return types return the default value
  for the type.
- Var functions returning multiple class types should be illegal, but
  instead they are compiled and result in runtime error.
- Var functions that return local data may not result in an error.
- Type functions with unambiguous return paths may result in "illegal
  cast" errors.
- Constructor calls with the same name in different modules are not
  properly resolved.
- Support for closures and first-class functions is not complete.
- Generic ref intent formals can result in an internal compiler error.


Tuples, Classes, Records, and Unions
------------------------------------
- Multiple inheritance as defined in the spec (multiple method-only classes)
  is not implemented.
- Declaring members and functions using inherited param or type
  variable may not work.
- Generic methods called with params actuals may result in "unresolved
  call" error at compile time or incorrect generated code.
- Function resolution may be overly conservative for methods of subclasses.
- Dynamic dispatch may lead to incorrect (statically bound) 'this'
- Type select on unions is not implemented.
- User-defined constructors are not robust.
- Constant checking for components of constant tuples is incomplete.
- Constant checking for fields of constant records is incomplete.
- Implicit casting of record parameters not implemented.
- Incorrect casting of a class variable to a type that is not its
  superclass does not report an error.
- Declaring class member using type aliases is sensitive to textual ordering.
- Array alias arguments to constructors fail to compile.
- Record and class members that are defined to be array alias fail to
  compile without an explicitly specified element type.
- Ambiguous definitions of class methods that are overridden in a
  subclass result in an internal compiler error.
- Overriding iterators may not work.
- Classes nested in procedures may result in a compile time error.
- Non-sync arguments to default constructors that expect sync vars are
  not properly coerced to sync type.
- Using a comparison operator with a record and 'nil' results in an
  internal compiler error.
- Records inheritance does not properly expose parent methods.
- Nested record inheritance results in a compilation error.
- Unused records defined in procedures result in an internal compiler error.
- Recursive records result in function resolution error or internal
  compiler error.
- Parentheses-less function without curly braces enclosing the body
  fail to parse correctly.
- Parentheses-less methods of classes/records may result in failed
  compilation if they are not declared with in the class/record
  definition.
- Function argument with type tuple of generic class results in a
  compiler assertion.
- Specifying the type of a tuple of domains or arrays results in a
  runtime error (nil dereference).  It may be possible to work around
  this by implicitly specifying the type by using an assignment at the
  declaration.
- Generic domain types in field declarations result in a compile time error.
- A size mismatch in assignment to a de-tupled expression may not produce an error message.
- Invalid use of tuple expansion as an expression results in the
  expression evaluating to the first element of the tuple.
- Tuple expanded list enclosed in parenthesis does not result in a
  tuple.
- Param loops over a tuple of tuples results in an internal compiler error.


Ranges, Domains, and Arrays
---------------------------
- Arrays of arrays where the inner arrays vary in size are not supported.
- Modifications to Sparse domains are not thread-safe.
- Sparse domain/array slicing is not supported.
- Constant checking for domains and arrays is not implemented.
- Subset checks on subdomains is not implemented.
- Bounds checks on index types is not implemented.
- Query expressions on domains and subdomains not supported.
- Array promotion/forall/for/scan expressions always evaluate to 1D arrays.
  E.g., f(A) where A promotes f() should result in an array of type:
    [A.domain] f(A(i)).type but instead results in a 1D array
  E.g., [i in D] f(i) should result in an array of type: [D] f(i).type
    but instead results in a 1D array
- Arrays and domains of different ranks can be zippered serially.
- Arrays declared over domains with negative strides may result in errors.
- Arrays of subdomains may not work.
- Array and domain runtime type information is not preserved through
  generic instantiation.
- Promoting a function over an array returned by a var function fails
  to compile.
- Associative domain clear() does not reset values of arrays declared
  over the domain.
- Enumerated domain initializers have no affect (the domain is populated with all the values of the enumerated type).
- Associative domains of rectangular domains result in a compile time error.
- Parallel (forall) domain iteration ignores alignment of the ranges
  used to declare the domain.
- Range operations can result in overflow.
    e.g., (0:uint..5 by -1).length
- Ranges that span the entire representable range of the index type
  do not work.
- Ranges that are sliced with another range with a different index
  type do not work.
- Range alignment is not always displayed when printing a range using
  writeln().
- The indexOrder() method on ranges does not work if the unbounded on
  the 'low' end.
- Param ranges are not supported.
- Range internals (bounds, stride, and alignment) are not checked for
  overflow when being manipulated.


Iterators and Generics
----------------------
- Recursive iterators may not work correctly.
- Iterators in records cannot change fields in that record.
- Nested 'var' iterators may not work correctly.
- Generic formals whose actuals are of sync type are instantiated as the base type.
- The implicit 'setter' argument does not work in var iterators.
- Type and parameter functions are not checked for side effects.
- Subclassing uninstantiated generic classes should be prohibited but is not.


Input and Output
----------------
- Binary I/O is not implemented.
- Format control for precision/width is lacking.
  Workaround: see doc/technotes/README.format
- Input of whole arrays is not implemented.
  Workaround: use a loop, e.g., for e in A do read(e);
- Calling writeln() of function names should be illegal, but currently
  results in unexpected output, obscure error messages, or compiler
  internal errors.
- Reading of tuple types not supported.
- Using 'on' in a writeThis method can lead to a deadlock.
- Printing of multi-dimensional arrays with negative strides may result in omitted line break.
- Printing of replicated arrays may not work properly.


Task Parallelism and Synchronization
------------------------------------
- Atomic statements are not implemented.
- Deadlocks may occur due to an insufficient number of threads.
- Arrays may not be moved to the heap due to begin statements or
  other indirect array element accesses.
- Sync and single type qualifiers are not disallowed on types that are
  not supported.
- Sync and single variables in records are not properly copied out
  when the record is passed as an out or inout argument.


Data Parallelism
----------------
- Some data parallel statements that should be parallelized are
  serialized with a warning message "X has been serialized".  In some
  case, this can be fixed in the program.
  E.g., Change '+ reduce for i in 1..n do i**2' to
                 '+ reduce forall i in 1..n do i**2' to avoid a
  warning that the reduce has been serialized.  In other cases, this
  is a current limitation:
  1. Scans are always serialized.
  2. Assignments from ranges to multidimensional arrays are always serialized.
  3. Assignment, reductions, and parallel iteration over opaque domains and
     arrays are always serialized.
- Reductions and scans of arrays of arrays may result in errors.
- Reductions zippered arrays of mismatched rank result in a compile time error.
- Records in reduction classes may results in out-of-bound indexing
  problems.
- Parallel zippered iteration does not perform runtime size/shape checks
- Whole-domain assignment operations on sparse domains are not all
  serialized as they should be.
- Overloaded xor may used in a reduction may result in an internal
  compiler error if used in a reduction.
- Domain promotion results in a race condition.


Locales and Domain Maps
-----------------------
- Distributed domain maps are currently only supported for dense,
  rectangular domains.
- The default value for locale types is incorrect.
- On statement variable declarations are not yet supported.
  E.g., on Locales(1) var x: real;
- String assignment across locales is by reference rather than value.
- PrivateDist must be used at the top-level scope.
- The local statement is not well supported.  For example, declaring
  domains (whether explicitly via a declaration or implicitly via
  slicing results in a runtime seg fault or non-local access error).
  On statements should be illegal, but result in local execution.


User-Defined Reductions and Scans and User-Defined Domain Maps
--------------------------------------------------------------
- User-defined reductions and scans are not yet implemented.
- User-defined domain maps are not yet implemented.


Standard Modules, Standard Distributions, and Standard Layouts
--------------------------------------------------------------
- On some platforms, the Math module is limited by the back-end C compiler.
- Extended precision math functions are not supported.
- The BlockCyclic distribution is incomplete.
- Reindexing stridable Cyclic is not fully supported.
- Block and Cyclic domains containing indices near the minimum or
  maximum integral type may overflow.
- Array assignment fails for Block distributions with bounding boxes
  that do not overlap with the bounds of the domain.
- The Memory module is does not work for multilocale executions.
- Distribution equality is not implemented properly.
- Records with domain map fields do not work.


Miscellaneous
-------------
- An array variable and function that share the same name at the same
  scope result in one of the two being arbitrarily chosen.
- Creating many domain types or arrays or tuples types causes the
  compilation time to become unreasonable.
- Default values for formal arguments do not accept conditional
  expressions.
- Bounds checking is not complete.
- Overloading operations such as multiplication for domain literals not
  supported.
- Leaving off () when calling exit results in an internal error.
- Extern support is not robust.
- Fixed length strings are not implemented.
- Types composed of runtime types are not runtime types
- Printing of a string field in a record in a class does not work.
- Compiler warning mechanism can result it lost warning if there are
  multiple warnings.
- Compiler warning mechanism not always type-checked correctly.


Multi-locale/GASNet executions
------------------------------
- stdin does not work for multi-locale/GASNet executions


Portability
-----------
Cray XE/XK/Cascade:
- Native GASNet conduit support is in beta and has not been tuned.
  See doc/platforms/README.cray for details on how to use the
  native conduit.

Cray XT:
- The memory limit for Chapel programs may need to be set manually.
  See doc/platforms/README.xt-cle for details.

PGI compilers (and possibly others):
- Floating point literals of -0.0 may not work as intended.

IEEE floating-point standard conformance:
  The --ieee-float flag is implemented by passing appropriate flags to
  the back-end compiler.  For some compilers, 100% IEEE floating-point
  conformance is not implemented.  In such cases, the --ieee-float
  flag will request the most standard conformant floating-point
  behavior (if such behavior can be identified).

