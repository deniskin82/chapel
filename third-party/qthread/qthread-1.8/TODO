These are ideas for things to do (in no particular order):

 1. Periodic task system

 2. Mass thread-kill (e.g. eurekas)

 3. Direct thread swapping, esp. for sinc's or other synchronization operations
    where the next thread to execute is obvious.

 4. Qthreads with in/out vectors for cross-node workstealing

 5. Cross-node synchronization (i.e. fill remote FEB)

 6. Hierarchical shepherds (need to rename shepherds)

 7. 128-bit syncvars

 8. Change the futurelib spawner to use up existing concurrency limits before
    blocking

 9. Add a qthread_replace(me, func, arg, argsize) function to enable convenient
    tail-recursion algorithms

10. Make futurelib limits dynamic

11. Port to XMT (is this even possible???)

12. Rework futures to use preallocated contexts

13. Rework most qutil/qloop functions to deal with deactivated shepherds

14. Continuation passing (put a "spawn_to" in the precondition record)...

15. Coalesce system calls (is this a good idea?)

16. Implement MAMA malloc?

17. Use LockBox mutexes on BlueGene/P

Things to think about:

 1. Non-executing shepherds to allow for memory locales without associated
 	computing resources.
