====
V1.0
====

Syntax
======

- Indenting should use 3 spaces (not tabs!).
- Brackets should start on the opening statement (if,for,...) except for function blocks
- Labels, classes, cases should all be indented
- Spaces should be used inside parenthesis (e.g., ( 5 ) not (5) )
- If in doubt you can use astyle (http://astyle.sourceforge.net). Check scripts/astyle-nanox.sh
- All files (sources,headers,Makefile.am) MUST have the proper license header (see script/preamble.txt). You can use headache to help you.

Naming Conventions
==================

- All core library classes must be defined in the nanos namespace.
- All plugin classes must be defined in the nanos::ext namespace:
	namespace nanos {
	namespace ext {
	}}
- Class names should have all words capitalized with no _  (e.g., MyClassName)
- Class methods should have all words capitalized with no _ except for the first one (e.g., myMethod)
- Define typedefs for template containers used for data members
- Data members should start with _ and have all words capitalized except the first one (e.g., _myData)
- Other variables (globals,parameters,...)  should have all words capitalized except the first one and not use _

C++ idioms
==========

- All classes MUST have a constructor, a copy constructor and a assignment operator. If you think that the class should not have some of them (or don't want to implement them) declare them as private. The only exception to this rule is Plugin subclasses.

- If you implement an assignment operator always check if a self-assignment ( a = a; ) is handled correctly. Mark so in the code with a comment.

- All classes MUST have a destructor unless they have no data members.

- Remember to initialize all members in the constructor. When possible do so in the initialization list and not in the constructor body.

- Do not declare static members in the core library outside of the System class unless you know very well what you are doing (this can mess the initialization process).

- Use STL containers an STL algorithms when possible. Beware though, of thread-safety implications with STL.

- As a rule of thumb, all data members should be private with get/set methods defined in the headers to increase inlining. Consider it deeply before declaring a data member shared or friend to another class.

- Use the named parameter idiom when possible to set object properties (see WorkDescriptor::tied for an example).

- All classes that implement a virtual method MUST declare their destructor to be virtual.

- Do *NOT* call virtual methods from inside constructors or destructors (see http://www.artima.com/cppsource/nevercall.html)

- If an argument to a function should never be NULL declare it as a reference when possible.

- Remember to define default values for arguments where it makes sense (i.e., most of the time is that value).

- Enum types should in general be defined inside the class that uses them.

- Error problems should be reported through the exception mechanism.

- Avoid the usage of macros unless strictly necessary. Consider templates and inline functions first.

- Use static functions when possible (particularly inside plugins)

- Use of default parameters is preferred over overloading a method when possible

Other idioms
============

- Avoid if possible any kind of atomic operation (atomic updates, locks, compare and swaps, ...). If necessary use the double check pattern:
       if ( cond ) {
         lock++;
         if ( cond ) {
	   // do whatever
         }
         lock--;
       } 

- Compare pointers to NULL:
	if ( p != NULL ) { ... } 
  not 
	if (!p) {...}
- Compare integer to the appropriate value
	if ( i > 0 ) { ... } 
  not 
	if (i) { ... }
- Do not compare booleans to true/false
	if ( myBoolean ) { ... } 
  not 
	if ( myBoolean == true ) { ... }

Documentation
=============

- Use doxygen (http://www.doxygen.org) to document all functions. Doxygen commands are enclosed in a special comment block above the function declaration. A minimum doxygen block should block like this:
  /*! \brief Brief description of the function
   *         can span several lines
   *
   *  Detailed description
   *  \param[in]  p1 Input parameter
   *  \param[out] p2 Output parameter
   *  \param[in,out] p3 Input/Output parameter
   *  \return  Returns bar
   *  \see  cross-references
   */
   int foo (int p1, int *p2, int *p3);

- Use doxygen to document as well data members, enum values, global variables, ... with:
   /**<  description */
  right beside it.

- Additionally, try to document parts of your code where what is happening may not be obvious. For example if you use complex combined pointer and integer arithmetics like:
	// copy all q elements into p, q is zero-terminated
	while ( *p++ = *q++ ); 

- Use FIXME (#ticket) and TODO (#ticket) to include 'defect' or 'task' comments inside the code. For example if you are including a comment inside the code indicating a ticket already opened in trac system it should be like this:

   // FIXME: (#104) Memory is requiered to be aligned to 8 bytes in some architectures, temporary solved using: ((s+7)>>3)<<3
   int size_to_allocate = ( ( *uwd == NULL ) ? sizeof( WD ) : 0 ) + ( ( data != NULL && *data == NULL ) ? (((data_size+7)>>3)<<3) : 0 ) +
                          sizeof( DD* ) * num_devices + dd_size ; 

- If you want to include a FIXME or TODO comment without being linked to a ticket number (due you are currently working on it), you should use your signature (username) before them. For example, if you are working in a piece of code and you want to add a TODO label, it should be like this:

   // xteruel:TODO: It will be interesting to instrument new wd info: (WD *) *uwd
   sys.getInstrumentor()->leaveRuntimeAPI();

Commandline and Environment
==========================

- All parameters names should start with -nth (e.g. -nth-pes ) and they should be lowercase
- Use '-' in parameter names to separate words
- If it's not a core parameter it should also include a plugin prefix (e.g., -nth-smp-stack-size, -nth-wfsch-fifo )
- All environment variable should start with NTH and they should be uppercase
- Use '_' in enviroment variables to separate words

